#ifndef MatlabDynamicTyping_H
#define MatlabDynamicTyping_H

//The DynamicType is a union of all possible types supported by the translator.

#include <variant>
#include <string>
#include <iostream>
#include <math.h>
#include <MatlabPrinting>

#include "Eigen/eigen/Dense"
using namespace Eigen;

#if defined(MATLAB_MEX_FILE)
#include "matrix.h"
#endif

namespace Matlab{
	
class DynamicType;
typedef std::vector<DynamicType> Cell; //this should be an n-dimensional array
typedef std::function<DynamicType(DynamicType)> Lambda;
	
enum NULL_STATE{
	UNITIALIZED,
	EMPTY
};
	
class DynamicType{
	private:
		std::variant<
			double,
			std::string,
			MatrixXd,
			Cell,
			Lambda,
			NULL_STATE
		> data;
		char* name = NULL;
		
	private:
		static std::string doubleToString(double num){
			return fmod(num,1)==0 ? std::to_string((int)num) : std::to_string(num);
		}
		
		static std::string matrixToString(const MatrixXd mat){
			std::stringstream ss;
			ss << mat;
			return ss.str();
		}
		
		static void dynamicTypeError(std::string message){
			#if defined(MATLAB_MEX_FILE)
			mexErrMsgTxt(("RUNTIME ERROR: " + message).c_str());
			#else
			std::cout << "RUNTIME ERROR: " << message << std::endl;
			throw(1);
			#endif
		}
		
		static void implementationError(std::string message){
			#if defined(MATLAB_MEX_FILE)
			mexErrMsgTxt(("TRANSLATOR IMPLEMENTATION ERROR: " + message).c_str());
			#else
			std::cout << "TRANSLATOR IMPLEMENTATION ERROR: " << message << std::endl;
			throw(1);
			#endif
		}
		
		void checkForUndefined(){
			if( std::holds_alternative<NULL_STATE>(data) &&
					std::get<NULL_STATE>(data)==UNITIALIZED ){
						
				if(name!=NULL){
					dynamicTypeError(std::string("Undefined function or variable '") + name + "'.");
				}else{
					dynamicTypeError("Undefined function or variable without a name.");
				}
			}
		}
		
	public:
		DynamicType(){ data = UNITIALIZED; }
		DynamicType(double data){ this->data = data; }
		DynamicType(std::string data){ this->data = data; }
		DynamicType(char* name){ this->name = name; data = UNITIALIZED; }
		DynamicType(MatrixXd data){ this->data = data; }
		
		void operator=(DynamicType& rhs){
			rhs.checkForUndefined();
			data = rhs.data;
		}
		
		void operator=(double rhs){
			data = rhs;
		}
		
		friend std::ostream& operator<< (std::ostream& stream, const DynamicType& type){
			if( std::holds_alternative<double>(type.data) ){
				stream << std::get<double>(type.data);
			}else if( std::holds_alternative<std::string>(type.data) ){
				stream << std::get<std::string>(type.data);
			}else if( std::holds_alternative<MatrixXd>(type.data) ){
				stream << std::get<MatrixXd>(type.data);
			}
        }
		
		std::string toString(){
			if( std::holds_alternative<double>(data) ){
				return doubleToString(std::get<double>(data));
			}else if( std::holds_alternative<std::string>(data) ){
				return std::get<std::string>(data);
			}else if( std::holds_alternative<MatrixXd>(data) ){
				return matrixToString(std::get<MatrixXd>(data));
			}
		}
		
		std::string getMatlabAssignmentString(){
			if( std::holds_alternative<double>(data) ){
				return doubleToString(std::get<double>(data));
			}else if( std::holds_alternative<std::string>(data) ){
				return "\"" + std::get<std::string>(data) + "\"";
			}else if( std::holds_alternative<MatrixXd>(data) ){
				return matrixToString(std::get<MatrixXd>(data));
			}
		}
		
		#if defined(MATLAB_MEX_FILE)
		DynamicType(mxArray* pr){
			if( mxIsDouble(pr) ){
				if( mxGetNumberOfDimensions(pr) > 2 ){
					implementationError("Matrices with more than 2 dimensions are not implemented.");
				}
				
				const mwSize* dims = mxGetDimensions(pr);
				int rows = dims[0];
				int cols = dims[1];
				
				if(rows==1 && cols==1){
					data = mxGetScalar(pr);
				}else{
					data = Map<MatrixXd>(mxGetPr(pr),rows,cols);
				}
			}else if( mxIsClass(pr, "string") ){				
				//Matlab's String class is encapsulated,
				//use Matlab call to convert it to char array
				mxArray *string_class[1], *char_array[1];
				string_class[0] = pr;
				mexCallMATLAB(1, char_array, 1, string_class, "char");
				
				//Parse the char array to create an std::string
				int buflen = mxGetN(char_array[0])*sizeof(mxChar)+1;
				char* buf = new char[buflen];
				mxGetString(char_array[0],buf,buflen);
				data = std::string(buf);
				delete buf;
			}else{
				implementationError("Input has unsupported class type.");
			}
		}
		
		void setMatlabValue(mxArray*& pr){
			if( std::holds_alternative<double>(data) ){
				pr = mxCreateDoubleMatrix(1, 1, mxREAL);
				double* output = mxGetPr(pr);
				output[0] = std::get<double>(data);
			}else if( std::holds_alternative<std::string>(data) ){
				//Matlab's string has a classdef, need Matlab to convert a char array to string
				mxArray* rhs = mxCreateString(std::get<std::string>(data).c_str());
				mexCallMATLAB(1, &pr, 1, &rhs, "string");
			}else if( std::holds_alternative<std::string>(data) ){
				pr = mxCreateString(std::get<std::string>(data).c_str());
			}else if( std::holds_alternative<MatrixXd>(data) ){
				MatrixXd mat = std::get<MatrixXd>(data);
				pr = mxCreateDoubleMatrix(mat.rows(), mat.cols(), mxREAL);
				double* output = mxGetPr(pr);
				
				for(int i = 0; i < mat.cols(); i++){
					for(int j = 0; j < mat.rows(); j++){
						output[j+i*mat.rows()] = mat(j,i);
					}
				}
			}
		}
		#endif
		
		
		DynamicType operator+(const double rhs){
			if( std::holds_alternative<double>(data) ){
				return DynamicType( std::get<double>(data) + rhs );
			}else if( std::holds_alternative<std::string>(data) ){
				return DynamicType( std::get<std::string>(data) + doubleToString(rhs) );
			}else{
				checkForUndefined();
			}
		}
		
		friend DynamicType operator+(const double lhs, DynamicType& rhs){
			if( std::holds_alternative<double>(rhs.data) ){
				return DynamicType( lhs + std::get<double>(rhs.data) );
			}else if( std::holds_alternative<std::string>(rhs.data) ){
				return DynamicType( doubleToString(lhs) + std::get<std::string>(rhs.data) );
			}else{
				rhs.checkForUndefined();
			}
		}
		
		std::string operator+(const std::string& rhs){
			if( std::holds_alternative<double>(data) ){
				return doubleToString(std::get<double>(data)) + rhs;
			}else if( std::holds_alternative<std::string>(data) ){
				return std::get<std::string>(data) + rhs;
			}else{
				checkForUndefined();
			}
		}
		
		friend std::string operator+(const std::string& lhs, DynamicType& rhs){
			if( std::holds_alternative<double>(rhs.data) ){
				return lhs + doubleToString(std::get<double>(rhs.data));
			}else if( std::holds_alternative<std::string>(rhs.data) ){
				return lhs + std::get<std::string>(rhs.data);
			}else{
				rhs.checkForUndefined();
			}
		}
		
		DynamicType operator+(DynamicType& rhs){
			if( std::holds_alternative<double>(data) ){
				if( std::holds_alternative<double>(rhs.data) ){
					return DynamicType( std::get<double>(data) + std::get<double>(rhs.data) );
				}else if( std::holds_alternative<std::string>(rhs.data) ){
					return DynamicType( doubleToString(std::get<double>(data)) + std::get<std::string>(rhs.data) );
				}else if( std::holds_alternative<MatrixXd>(rhs.data) ){
					double lhs_data = std::get<double>(data);
					MatrixXd rhs_data = std::get<MatrixXd>(rhs.data);
					for(int i = 0; i < rhs_data.cols(); i++){
						for(int j = 0; j < rhs_data.rows(); j++){
							rhs_data(j,i) += lhs_data;
						}
					}
					return DynamicType(rhs_data);
				}else{
					rhs.checkForUndefined();
				}
			}else if( std::holds_alternative<std::string>(data) ){
				if( std::holds_alternative<double>(rhs.data) ){
					return DynamicType( std::get<std::string>(data) + doubleToString(std::get<double>(rhs.data)) );
				}else if( std::holds_alternative<std::string>(rhs.data) ){
					return DynamicType( std::get<std::string>(data) + std::get<std::string>(rhs.data) );
				}else if( std::holds_alternative<MatrixXd>(rhs.data) ){
					implementationError("Adding strings and matrices is not implemented.");
				}else{
					rhs.checkForUndefined();
				}
			}else if( std::holds_alternative<MatrixXd>(data) ){
				if( std::holds_alternative<double>(rhs.data) ){
					MatrixXd lhs_data = std::get<MatrixXd>(data);
					double rhs_data = std::get<double>(rhs.data);
					for(int i = 0; i < lhs_data.cols(); i++){
						for(int j = 0; j < lhs_data.rows(); j++){
							lhs_data(j,i) += rhs_data;
						}
					}
					return DynamicType(lhs_data);
				}else if( std::holds_alternative<std::string>(rhs.data) ){
					implementationError("Adding strings and matrices is not implemented.");
				}else if( std::holds_alternative<MatrixXd>(rhs.data) ){
					MatrixXd lhs_data = std::get<MatrixXd>(data);
					MatrixXd rhs_data = std::get<MatrixXd>(rhs.data);
					if(lhs_data.rows()!=rhs_data.rows()){
						if(lhs_data.rows()==1){
							if(lhs_data.cols()!=rhs_data.cols()){
								if(lhs_data.cols()==1){
									for(int i = 0; i < rhs_data.cols(); i++){
										for(int j = 0; j < rhs_data.rows(); j++){
											rhs_data(j,i) += lhs_data(0,0);
										}
									}
									return DynamicType(rhs_data);
								}else if(rhs_data.cols()==1){
									MatrixXd ans(lhs_data.cols(),rhs_data.rows());
									for(int i = 0; i < lhs_data.cols(); i++){
										for(int j = 0; j < rhs_data.rows(); j++){
											ans(j,i) = lhs_data(i) + rhs_data(j);
										}
									}
									return DynamicType(ans);
								}else{
									dynamicTypeError("Matrix dimensions must agree.");
								}
							}else{
								for(int i = 0; i < rhs_data.rows(); i++){
									rhs_data.row(i) += lhs_data;
								}
								return DynamicType(rhs_data);
							}
						}else if(rhs_data.rows()==1){
							if(lhs_data.cols()!=rhs_data.cols()){
								if(lhs_data.cols()==1){
									MatrixXd ans(rhs_data.cols(),lhs_data.rows());
									for(int i = 0; i < rhs_data.cols(); i++){
										for(int j = 0; j < lhs_data.rows(); j++){
											ans(j,i) = rhs_data(i) + lhs_data(j);
										}
									}
									return DynamicType(ans);
								}else if(rhs_data.cols()==1){
									for(int i = 0; i < lhs_data.cols(); i++){
										for(int j = 0; j < lhs_data.rows(); j++){
											lhs_data(j,i) += rhs_data(0,0);
										}
									}
									return DynamicType(lhs_data);
								}else{
									dynamicTypeError("Matrix dimensions must agree.");
								}
							}else{
								for(int i = 0; i < lhs_data.rows(); i++){
									lhs_data.row(i) += rhs_data;
								}
								return DynamicType(lhs_data);
							}
						}else{
							dynamicTypeError("Matrix dimensions must agree.");
						}
					}else if(lhs_data.cols()!=rhs_data.cols()){
						if(lhs_data.cols()==1){
							for(int i = 0; i < rhs_data.cols(); i++){
								rhs_data.col(i) += lhs_data;
							}
							return DynamicType(rhs_data);
						}else if(rhs_data.cols()==1){
							for(int i = 0; i < lhs_data.cols(); i++){
								lhs_data.col(i) += rhs_data;
							}
							return DynamicType(lhs_data);
						}else{
							dynamicTypeError("Matrix dimensions must agree.");
						}
					}else{
						return DynamicType(lhs_data+rhs_data);
					}
				}else{
					rhs.checkForUndefined();
				}
			}else{
				checkForUndefined();
			}
		}
		
		DynamicType operator-(DynamicType& rhs){
			if( std::holds_alternative<double>(data) ){
				if( std::holds_alternative<double>(rhs.data) ){
					return DynamicType( std::get<double>(data) - std::get<double>(rhs.data) );
				}else if( std::holds_alternative<std::string>(rhs.data) ){
					dynamicTypeError("Undefined operator '-' for input arguments of type 'string'.");
				}else if( std::holds_alternative<MatrixXd>(rhs.data) ){
					double lhs_data = std::get<double>(data);
					MatrixXd rhs_data = std::get<MatrixXd>(rhs.data);
					for(int i = 0; i < rhs_data.cols(); i++){
						for(int j = 0; j < rhs_data.rows(); j++){
							rhs_data(j,i) -= lhs_data;
						}
					}
					return DynamicType(rhs_data);
				}else{
					rhs.checkForUndefined();
				}
			}else if( std::holds_alternative<std::string>(data) ){
				dynamicTypeError("Undefined operator '-' for input arguments of type 'string'.");
			}else if( std::holds_alternative<MatrixXd>(data) ){
				if( std::holds_alternative<double>(rhs.data) ){
					MatrixXd lhs_data = std::get<MatrixXd>(data);
					double rhs_data = std::get<double>(rhs.data);
					for(int i = 0; i < lhs_data.cols(); i++){
						for(int j = 0; j < lhs_data.rows(); j++){
							lhs_data(j,i) -= rhs_data;
						}
					}
					return DynamicType(lhs_data);
				}else if( std::holds_alternative<std::string>(rhs.data) ){
					dynamicTypeError("Undefined operator '-' for input arguments of type 'string'.");
				}else if( std::holds_alternative<MatrixXd>(rhs.data) ){
					MatrixXd lhs_data = std::get<MatrixXd>(data);
					MatrixXd rhs_data = std::get<MatrixXd>(rhs.data);
					if(lhs_data.rows()!=rhs_data.rows()){
						if(lhs_data.rows()==1){
							if(lhs_data.cols()!=rhs_data.cols()){
								if(lhs_data.cols()==1){
									for(int i = 0; i < rhs_data.cols(); i++){
										for(int j = 0; j < rhs_data.rows(); j++){
											rhs_data(j,i) = lhs_data(0,0) - rhs_data(j,i);
										}
									}
									return DynamicType(rhs_data);
								}else if(rhs_data.cols()==1){
									MatrixXd ans(lhs_data.cols(),rhs_data.rows());
									for(int i = 0; i < lhs_data.cols(); i++){
										for(int j = 0; j < rhs_data.rows(); j++){
											ans(j,i) = lhs_data(i) - rhs_data(j);
										}
									}
									return DynamicType(ans);
								}else{
									dynamicTypeError("Matrix dimensions must agree.");
								}
							}else{
								for(int i = 0; i < rhs_data.rows(); i++){
									rhs_data.row(i) = lhs_data - rhs_data.row(i);
								}
								return DynamicType(rhs_data);
							}
						}else if(rhs_data.rows()==1){
							if(lhs_data.cols()!=rhs_data.cols()){
								if(lhs_data.cols()==1){
									MatrixXd ans(rhs_data.cols(),lhs_data.rows());
									for(int i = 0; i < rhs_data.cols(); i++){
										for(int j = 0; j < lhs_data.rows(); j++){
											ans(j,i) = lhs_data(j) - rhs_data(i);
										}
									}
									return DynamicType(ans);
								}else if(rhs_data.cols()==1){
									for(int i = 0; i < lhs_data.cols(); i++){
										for(int j = 0; j < lhs_data.rows(); j++){
											lhs_data(j,i) -= rhs_data(0,0);
										}
									}
									return DynamicType(lhs_data);
								}else{
									dynamicTypeError("Matrix dimensions must agree.");
								}
							}else{
								for(int i = 0; i < lhs_data.rows(); i++){
									lhs_data.row(i) -= rhs_data;
								}
								return DynamicType(lhs_data);
							}
						}else{
							dynamicTypeError("Matrix dimensions must agree.");
						}
					}else if(lhs_data.cols()!=rhs_data.cols()){
						if(lhs_data.cols()==1){
							for(int i = 0; i < rhs_data.cols(); i++){
								rhs_data.col(i) = lhs_data - rhs_data.col(i);
							}
							return DynamicType(rhs_data);
						}else if(rhs_data.cols()==1){
							for(int i = 0; i < lhs_data.cols(); i++){
								lhs_data.col(i) -= rhs_data;
							}
							return DynamicType(lhs_data);
						}else{
							dynamicTypeError("Matrix dimensions must agree.");
						}
					}else{
						return DynamicType(lhs_data-rhs_data);
					}
				}else{
					rhs.checkForUndefined();
				}
			}else{
				checkForUndefined();
			}
		}
		
		double operator-(const double rhs){
			if( std::holds_alternative<double>(data) ){
				return std::get<double>(data) - rhs;
			}else if( std::holds_alternative<std::string>(data) ){
				dynamicTypeError("Undefined operator '-' for input arguments of type 'string'.");
			}else{
				checkForUndefined();
			}
		}
		
		friend double operator-(const double lhs, DynamicType& rhs){
			if( std::holds_alternative<double>(rhs.data) ){
				return lhs - std::get<double>(rhs.data);
			}else if( std::holds_alternative<std::string>(rhs.data) ){
				dynamicTypeError("Undefined operator '-' for input arguments of type 'string'.");
			}else{
				rhs.checkForUndefined();
			}
		}
		
		DynamicType operator*(DynamicType& rhs){
			if( std::holds_alternative<double>(data) ){
				if( std::holds_alternative<double>(rhs.data) ){
					return DynamicType( std::get<double>(data) * std::get<double>(rhs.data) );
				}else if( std::holds_alternative<std::string>(rhs.data) ){
					dynamicTypeError("Undefined operator '*' for input arguments of type 'string'.");
				}else{
					rhs.checkForUndefined();
				}
			}else if( std::holds_alternative<std::string>(data) ){
				dynamicTypeError("Undefined operator '*' for input arguments of type 'string'.");
			}else{
				checkForUndefined();
			}
		}
		
		double operator*(const double rhs){
			if( std::holds_alternative<double>(data) ){
				return std::get<double>(data) * rhs;
			}else if( std::holds_alternative<std::string>(data) ){
				dynamicTypeError("Undefined operator '*' for input arguments of type 'string'.");
			}else{
				checkForUndefined();
			}
		}
		
		friend double operator*(const double lhs, DynamicType& rhs){
			if( std::holds_alternative<double>(rhs.data) ){
				return lhs * std::get<double>(rhs.data);
			}else if( std::holds_alternative<std::string>(rhs.data) ){
				dynamicTypeError("Undefined operator '*' for input arguments of type 'string'.");
			}else{
				rhs.checkForUndefined();
			}
		}
		
		bool operator<(const double rhs){
			if( std::holds_alternative<double>(data) ){
				return std::get<double>(data) < rhs;
			}else if( std::holds_alternative<std::string>(data) ){
				dynamicTypeError("Comparison between string and double is not supported.");
			}else{
				checkForUndefined();
			}
		}
		
		friend bool operator<(const double lhs, DynamicType& rhs){
			if( std::holds_alternative<double>(rhs.data) ){
				return lhs < std::get<double>(rhs.data);
			}else if( std::holds_alternative<std::string>(rhs.data) ){
				dynamicTypeError("Comparison between string and double is not supported.");
			}else{
				rhs.checkForUndefined();
			}
		}
		
		bool operator<=(const double rhs){
			if( std::holds_alternative<double>(data) ){
				return std::get<double>(data) <= rhs;
			}else if( std::holds_alternative<std::string>(data) ){
				dynamicTypeError("Comparison between string and double is not supported.");
			}else{
				checkForUndefined();
			}
		}
		
		friend bool operator<=(const double lhs, DynamicType& rhs){
			if( std::holds_alternative<double>(rhs.data) ){
				return lhs <= std::get<double>(rhs.data);
			}else if( std::holds_alternative<std::string>(rhs.data) ){
				dynamicTypeError("Comparison between string and double is not supported.");
			}else{
				rhs.checkForUndefined();
			}
		}
		
		bool operator>(const double rhs){
			if( std::holds_alternative<double>(data) ){
				return std::get<double>(data) > rhs;
			}else if( std::holds_alternative<std::string>(data) ){
				dynamicTypeError("Comparison between string and double is not supported.");
			}else{
				checkForUndefined();
			}
		}
		
		friend bool operator>(const double lhs, DynamicType& rhs){
			if( std::holds_alternative<double>(rhs.data) ){
				return lhs > std::get<double>(rhs.data);
			}else if( std::holds_alternative<std::string>(rhs.data) ){
				dynamicTypeError("Comparison between string and double is not supported.");
			}else{
				rhs.checkForUndefined();
			}
		}
		
		bool operator>=(const double rhs){
			if( std::holds_alternative<double>(data) ){
				return std::get<double>(data) >= rhs;
			}else if( std::holds_alternative<std::string>(data) ){
				dynamicTypeError("Comparison between string and double is not supported.");
			}else{
				checkForUndefined();
			}
		}
		
		friend bool operator>=(const double lhs, DynamicType& rhs){
			if( std::holds_alternative<double>(rhs.data) ){
				return lhs >= std::get<double>(rhs.data);
			}else if( std::holds_alternative<std::string>(rhs.data) ){
				dynamicTypeError("Comparison between string and double is not supported.");
			}else{
				rhs.checkForUndefined();
			}
		}
		
		bool operator==(const double rhs){
			if( std::holds_alternative<double>(data) ){
				return std::get<double>(data) == rhs;
			}else if( std::holds_alternative<std::string>(data) ){
				dynamicTypeError("Comparison between string and double is not supported.");
			}else{
				checkForUndefined();
			}
		}
		
		friend bool operator==(const double lhs, DynamicType& rhs){
			if( std::holds_alternative<double>(rhs.data) ){
				return lhs == std::get<double>(rhs.data);
			}else if( std::holds_alternative<std::string>(rhs.data) ){
				dynamicTypeError("Comparison between string and double is not supported.");
			}else{
				rhs.checkForUndefined();
			}
		}
};

};

#endif